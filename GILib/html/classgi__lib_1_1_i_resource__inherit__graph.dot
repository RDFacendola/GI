digraph "gi_lib::IResource"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{gi_lib::IResource\n||+ ~IResource()\l+ GetSize()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{gi_lib::Object\n||+ Object()\l+ ~Object()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_object.html",tooltip="Base interface for every object whose life cycle is determined by a reference counter. "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{gi_lib::DeferredRenderer\lMaterial\n||+ ~DeferredRendererMaterial()\l+ GetMaterial()\l+ GetMaterial()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_deferred_renderer_material.html",tooltip="Exposes additional informations for a material used by a deferred renderer. "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{gi_lib::dx11::DX11Deferred\lRendererMaterial\n||+ DX11DeferredRendererMaterial()\l+ DX11DeferredRendererMaterial()\l+ GetMaterial()\l+ GetMaterial()\l+ SetMatrix()\l+ Bind()\l+ GetSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_deferred_renderer_material.html",tooltip="Material for a DirectX11 deferred renderer. A custom material should not be compiled from code direct..."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{gi_lib::IComputation\n||+ ~IComputation()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l+ SetOutput()\l+ SetInput()\l+ SetInput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_computation.html",tooltip="Base interface for GPU computations. "];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{gi_lib::dx11::DX11Computation\n|+ shader_composite_\l+ group_size_\l|+ DX11Computation()\l+ DX11Computation()\l+ ~DX11Computation()\l+ operator=()\l+ GetSize()\l+ Dispatch()\l+ SetInput()\l+ SetInput()\l+ SetOutput()\l+ SetInput()\l+ SetInput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_computation.html",tooltip="Encapsulate a compute shader. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{gi_lib::IGPTexture2D\n||+ ~IGPTexture2D()\l+ GetTexture()\l+ GetWidth()\l+ GetHeight()\l+ GetMIPCount()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_g_p_texture2_d.html",tooltip="Base interface for general-purpose textures. A general-purpose resource can be accessed by the GPU fo..."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{gi_lib::dx11::DX11GPTexture2D\n||+ DX11GPTexture2D()\l+ GetTexture()\l+ GetWidth()\l+ GetHeight()\l+ GetMIPCount()\l+ GetSize()\l+ GetFormat()\l+ GetShaderResourceView()\l+ GetUnorderedAccessView()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_g_p_texture2_d.html",tooltip="DirectX11 general-purpose 2D texture. This texture can be used as a regular texture but can also be b..."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{gi_lib::IHardwareBuffer\n||+ ~IHardwareBuffer()\l+ Lock()\l+ Unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_hardware_buffer.html",tooltip="Represents a low-level buffer stored in GPU-memory. The buffer can be written by the CPU and read by ..."];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{gi_lib::dx11::DX11Buffer\n||+ DX11Buffer()\l+ DX11Buffer()\l+ ~DX11Buffer()\l+ operator=()\l+ Lock()\l+ Unlock()\l+ GetSize()\l+ Lock()\l+ Unlock()\l+ Commit()\l+ GetBuffer()\l+ GetShaderResourceView()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_buffer.html",tooltip="Represents a generic buffer. "];
  Node9 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{gi_lib::IStructuredArray\n||+ ~IStructuredArray()\l+ GetCount()\l+ GetElementSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_structured_array.html",tooltip="Represents a low-level buffer that behaves like a strongly-typed array of elements. This array can be written by a CPU and read by a GPU. "];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{gi_lib::dx11::DX11Structured\lArray\n||+ DX11StructuredArray()\l+ Lock()\l+ Unlock()\l+ GetCount()\l+ GetElementSize()\l+ GetSize()\l+ Lock()\l+ Unlock()\l+ Commit()\l+ GetCommitter()\l+ GetShaderResourceView()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_structured_array.html",tooltip="Represents a low-level buffer that behaves like a strongly-typed array of elements under DirectX 11..."];
  Node9 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{gi_lib::IStructuredBuffer\n||+ ~IStructuredBuffer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_structured_buffer.html",tooltip="Represents a low-level buffer that behaves like a strongly-typed structure. The buffer can be written..."];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{gi_lib::dx11::DX11Structured\lBuffer\n||+ DX11StructuredBuffer()\l+ DX11StructuredBuffer()\l+ Lock()\l+ Unlock()\l+ GetSize()\l+ Lock()\l+ Unlock()\l+ Commit()\l+ GetCommitter()\l+ GetConstantBuffer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_structured_buffer.html",tooltip="Represents a low-level buffer that behaves like a strongly-typed structure under DirectX 11..."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{gi_lib::IMaterial\n||+ ~IMaterial()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_material.html",tooltip="Base interface for materials. "];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{gi_lib::dx11::DX11Material\n|+ shader_composite_\l+ input_layout_\l|+ DX11Material()\l+ DX11Material()\l+ ~DX11Material()\l+ GetSize()\l+ Bind()\l+ Unbind()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l+ SetInput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_material.html",tooltip="DirectX11 material. "];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{gi_lib::IRenderTarget\n||+ ~IRenderTarget()\l+ GetCount()\l+ operator[]()\l+ operator[]()\l+ GetDepthBuffer()\l+ GetDepthBuffer()\l+ Resize()\l+ GetWidth()\l+ GetHeight()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_render_target.html",tooltip="Base interface for render targets. A render target may contain multiple render surfaces as well as a ..."];
  Node17 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{gi_lib::dx11::DX11Render\lTarget\n||+ DX11RenderTarget()\l+ DX11RenderTarget()\l+ ~DX11RenderTarget()\l+ GetSize()\l+ GetCount()\l+ operator[]()\l+ operator[]()\l+ GetDepthBuffer()\l+ GetDepthBuffer()\l+ Resize()\l+ GetWidth()\l+ GetHeight()\l+ ClearDepth()\l+ ClearTargets()\l+ Bind()\l+ Unbind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_render_target.html",tooltip="DirectX11 render target. "];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{gi_lib::IRenderTargetArray\n||+ ~IRenderTargetArray()\l+ GetCount()\l+ GetDepthBuffer()\l+ GetDepthBuffer()\l+ GetWidth()\l+ GetHeight()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_render_target_array.html",tooltip="Base interface for render target arrays. A render target array is an array of textures, each of which can be drawn upon. Elements in the array are guaranteed to have the same dimensions. The array also defines an optional shared depth stencil buffer for Z testing while drawing. "];
  Node19 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{gi_lib::dx11::DX11Render\lTargetArray\n||+ DX11RenderTargetArray()\l+ ~DX11RenderTargetArray()\l+ GetCount()\l+ GetDepthBuffer()\l+ GetDepthBuffer()\l+ GetWidth()\l+ GetHeight()\l+ GetSize()\l+ ClearDepth()\l+ ClearTargets()\l+ Bind()\l+ Unbind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_render_target_array.html",tooltip="DirectX11 render target array. "];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node21 [label="{gi_lib::ISampler\n||+ ~ISampler()\l+ GetMaxAnisotropy()\l+ GetTextureMapping()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_sampler.html",tooltip="Base interface for sampler states. "];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node22 [label="{gi_lib::dx11::DX11Sampler\n||+ DX11Sampler()\l+ GetSize()\l+ GetMaxAnisotropy()\l+ GetTextureMapping()\l+ GetSamplerStateView()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_sampler.html",tooltip="Represents a DirectX11 sampler state. "];
  Node1 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{gi_lib::IStaticMesh\n||+ ~IStaticMesh()\l+ GetVertexCount()\l+ GetPolygonCount()\l+ GetLODCount()\l+ GetBoundingBox()\l+ GetSubsetCount()\l+ GetSubset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_static_mesh.html",tooltip="Base interface for static meshes. "];
  Node23 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node24 [label="{gi_lib::dx11::DX11Mesh\n||+ DX11Mesh()\l+ GetSize()\l+ GetVertexCount()\l+ GetPolygonCount()\l+ GetLODCount()\l+ GetBoundingBox()\l+ GetSubsetCount()\l+ GetSubset()\l+ Bind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_mesh.html",tooltip="DirectX11 static mesh. "];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node25 [label="{gi_lib::ITexture2D\n||+ ~ITexture2D()\l+ GetWidth()\l+ GetHeight()\l+ GetMIPCount()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_texture2_d.html",tooltip="Base interface for plain textures. "];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 [label="{gi_lib::dx11::DX11Texture2D\n||+ DX11Texture2D()\l+ DX11Texture2D()\l+ ~DX11Texture2D()\l+ GetSize()\l+ GetWidth()\l+ GetHeight()\l+ GetMIPCount()\l+ GetFormat()\l+ GetShaderResourceView()\l+ GetTexture()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_texture2_d.html",tooltip="DirectX11 2D texture. "];
  Node26 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node27 [label="{gi_lib::dx11::DX11DepthTexture2D\n||+ DX11DepthTexture2D()\l+ ~DX11DepthTexture2D()\l+ Clear()\l+ GetDepthStencilView()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_depth_texture2_d.html",tooltip="DirectX11 2D texture that can be used as a depth-stencil buffer. "];
  Node26 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node28 [label="{gi_lib::dx11::DX11Render\lTexture2D\n||+ DX11RenderTexture2D()\l+ DX11RenderTexture2D()\l+ ~DX11RenderTexture2D()\l+ Clear()\l+ GetRenderTargetView()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_render_texture2_d.html",tooltip="DirectX11 2D texture that can be used as a render target. "];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node29 [label="{gi_lib::ITexture2DArray\n||+ ~ITexture2DArray()\l+ GetWidth()\l+ GetHeight()\l+ GetMIPCount()\l+ GetCount()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_i_texture2_d_array.html",tooltip="Base interface for plain texture arrays. "];
  Node29 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node30 [label="{gi_lib::dx11::DX11Texture2\lDArray\n||+ DX11Texture2DArray()\l+ GetWidth()\l+ GetHeight()\l+ GetMIPCount()\l+ GetCount()\l+ GetSize()\l+ GetFormat()\l+ GetShaderResourceView()\l+ GetTextureArray()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1dx11_1_1_d_x11_texture2_d_array.html",tooltip="DirectX11 2D texture array. "];
  Node1 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node31 [label="{gi_lib::StructuredArray\l\< TElement \>\n||+ StructuredArray()\l+ ~StructuredArray()\l+ operator[]()\l+ GetBuffer()\l+ GetBuffer()\l+ GetCount()\l+ GetElementSize()\l+ Lock()\l+ Unlock()\l+ GetSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_structured_array.html",tooltip="Represents a low-level buffer that behaves like a strongly-typed array of elements. This array can be written by a CPU and read by a GPU. "];
  Node1 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node32 [label="{gi_lib::StructuredBuffer\l\< TType \>\n||+ StructuredBuffer()\l+ ~StructuredBuffer()\l+ operator const IStructured\lBuffer &()\l+ operator IStructuredBuffer &()\l+ operator*()\l+ GetBuffer()\l+ GetBuffer()\l+ Lock()\l+ Unlock()\l+ GetSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_structured_buffer.html",tooltip="Represents a low-level buffer that behaves like a strongly-typed structure. The buffer can be written..."];
  Node1 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node33 [label="{gi_lib::StructuredBuffer\l\< gi_lib::dx11::VSPerObjectBuffer \>\n||+ StructuredBuffer()\l+ ~StructuredBuffer()\l+ operator const IStructured\lBuffer &()\l+ operator IStructuredBuffer &()\l+ operator*()\l+ GetBuffer()\l+ GetBuffer()\l+ Lock()\l+ Unlock()\l+ GetSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_structured_buffer.html"];
}
