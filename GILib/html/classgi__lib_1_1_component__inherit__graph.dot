digraph "gi_lib::Component"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{gi_lib::Component\n||+ Component()\l+ Component()\l+ ~Component()\l+ operator=()\l+ AddComponent()\l+ RemoveComponent()\l+ GetComponent()\l+ GetComponent()\l+ GetComponents()\l+ GetComponents()\l+ GetTypes()\l+ Dispose()\l+ OnRemoved()\l+ Create()\l+ Create()\l# Initialize()\l# Finalize()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{gi_lib::CameraComponent\n||+ CameraComponent()\l+ ~CameraComponent()\l+ GetProjectionType()\l+ SetProjectionType()\l+ GetFieldOfView()\l+ SetFieldOfView()\l+ GetMinimumDistance()\l+ SetMinimumDistance()\l+ GetMaximumDistance()\l+ SetMaximumDistance()\l+ GetViewFrustum()\l+ GetViewTransform()\l+ GetPosition()\l+ GetTypes()\l# Initialize()\l# Finalize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_camera_component.html",tooltip="Basic class for camera components. "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{gi_lib::DeferredRenderer\lComponent\n||+ DeferredRendererComponent()\l+ DeferredRendererComponent()\l+ operator=()\l+ ~DeferredRendererComponent()\l+ GetMesh()\l+ GetMesh()\l+ GetMaterialCount()\l+ GetMaterial()\l+ GetMaterial()\l+ GetWorldTransform()\l+ SetMaterial()\l+ GetTypes()\l# Initialize()\l# Finalize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_deferred_renderer_component.html",tooltip="Component used to draw object using a deferred renderer. The component will store one material per me..."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{gi_lib::FlyCameraComponent\n||+ FlyCameraComponent()\l+ FlyCameraComponent()\l+ ~FlyCameraComponent()\l+ Update()\l+ GetTypes()\l# Initialize()\l# Finalize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_fly_camera_component.html",tooltip="Component used to move an aerial camera. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{gi_lib::NodeComponent\n||+ NodeComponent()\l+ NodeComponent()\l+ ~NodeComponent()\l+ GetScene()\l+ GetScene()\l+ GetName()\l+ GetUid()\l+ GetTypes()\l# Initialize()\l# Finalize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_node_component.html",tooltip="Node component used to link a scene to its nodes. "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{gi_lib::TransformComponent\n||+ TransformComponent()\l+ TransformComponent()\l+ GetTranslation()\l+ SetTranslation()\l+ GetRotation()\l+ SetRotation()\l+ GetScale()\l+ SetScale()\l+ GetRight()\l+ GetUp()\l+ GetForward()\l+ GetPosition()\l+ GetLocalTransform()\l+ GetWorldTransform()\l+ GetParent()\l+ GetParent()\l+ SetParent()\l+ GetChildren()\l+ GetChildren()\l+ GetTypes()\l+ OnTransformChanged()\l# Initialize()\l# Finalize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_transform_component.html",tooltip="Expose 3D-space transform capabilities. The composite transformation is calculated by applying the sc..."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{gi_lib::VolumeComponent\n||+ ~VolumeComponent()\l+ TestAgainst()\l+ TestAgainst()\l+ TestAgainst()\l+ OnChanged()\l+ GetTypes()\l# NotifyChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_volume_component.html",tooltip="Contains informations about an axis-aligned bounding box surrounding the node. "];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{gi_lib::BaseLightComponent\n||+ BaseLightComponent()\l+ BaseLightComponent()\l+ GetTypes()\l+ GetColor()\l+ SetColor()\l# Initialize()\l# Finalize()\l# GetTransformComponent()\l# ComputeBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_base_light_component.html",tooltip="Base class for each light. "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{gi_lib::DirectionalLight\lComponent\n||+ DirectionalLightComponent()\l+ TestAgainst()\l+ TestAgainst()\l+ TestAgainst()\l+ GetTypes()\l+ GetDirection()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_directional_light_component.html",tooltip="Represents a single directional light. A directional light is a light that has no position and irradi..."];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{gi_lib::PointLightComponent\n|+ kDefaultCutoff\l|+ PointLightComponent()\l+ PointLightComponent()\l+ GetTypes()\l+ TestAgainst()\l+ TestAgainst()\l+ TestAgainst()\l+ GetConstantFactor()\l+ SetConstantFactor()\l+ GetLinearFactor()\l+ SetLinearFactor()\l+ GetQuadraticFactor()\l+ SetQuadraticFactor()\l+ GetCutoff()\l+ SetCutoff()\l+ SetRadius()\l+ GetPosition()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_point_light_component.html",tooltip="Represents a single point light. A point light is a light that has a position and irradiates light in..."];
  Node8 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{gi_lib::SpotLightComponent\n||+ SpotLightComponent()\l+ SpotLightComponent()\l+ GetTypes()\l+ TestAgainst()\l+ TestAgainst()\l+ TestAgainst()\l+ GetLightConeAngle()\l+ SetLightConeAngle()\l+ GetPenumbraConeAngle()\l+ SetPenumbraConeAngle()\l+ GetFalloff()\l+ SetFalloff()\l+ GetConstantFactor()\l+ SetConstantFactor()\l+ GetLinearFactor()\l+ SetLinearFactor()\l+ GetQuadraticFactor()\l+ SetQuadraticFactor()\l+ GetPosition()\l+ GetDirection()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_spot_light_component.html",tooltip="Represents a single spot light. A spotlight is a light that irradiates from one point towards a direc..."];
  Node7 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{gi_lib::MeshComponent\n||+ MeshComponent()\l+ MeshComponent()\l+ GetMesh()\l+ GetMesh()\l+ SetMesh()\l+ TestAgainst()\l+ TestAgainst()\l+ TestAgainst()\l+ GetTypes()\l# Initialize()\l# Finalize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgi__lib_1_1_mesh_component.html",tooltip="Mesh component. "];
}
